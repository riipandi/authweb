<script>
  let currentMode = 'single';

  // Sync range and number inputs
  document.getElementById('lengthRange').addEventListener('input', (e) => {
    document.getElementById('length').value = e.target.value;
    generatePasswords();
  });

  document.getElementById('length').addEventListener('input', (e) => {
    document.getElementById('lengthRange').value = e.target.value;
    generatePasswords();
  });

  document.getElementById('countRange')?.addEventListener('input', (e) => {
    document.getElementById('batchCount').value = e.target.value;
    generatePasswords();
  });

  document.getElementById('batchCount')?.addEventListener('input', (e) => {
    document.getElementById('countRange').value = e.target.value;
    generatePasswords();
  });

  // Existing JavaScript functions remain the same
  function switchMode(mode) {
    currentMode = mode;

    // Toggle content visibility
    document.getElementById('singleMode').classList.toggle('hidden', mode !== 'single');
    document.getElementById('batchMode').classList.toggle('hidden', mode !== 'batch');
    document.getElementById('batchCountContainer').classList.toggle('hidden', mode !== 'batch');

    // Update tab styles
    const singleBtn = document.getElementById('singleModeBtn');
    const batchBtn = document.getElementById('batchModeBtn');
    const singleIndicator = document.getElementById('singleModeIndicator');
    const batchIndicator = document.getElementById('batchModeIndicator');

    if (mode === 'single') {
      singleBtn.classList.add('text-violet-700');
      singleBtn.classList.remove('text-gray-500');
      singleIndicator.classList.remove('opacity-0');

      batchBtn.classList.add('text-gray-500');
      batchBtn.classList.remove('text-violet-700');
      batchIndicator.classList.add('opacity-0');
    } else {
      batchBtn.classList.add('text-violet-700');
      batchBtn.classList.remove('text-gray-500');
      batchIndicator.classList.remove('opacity-0');

      singleBtn.classList.add('text-gray-500');
      singleBtn.classList.remove('text-violet-700');
      singleIndicator.classList.add('opacity-0');
    }

    generatePasswords();
  }

  function generateSinglePassword() {
    const chars = getCharacterSet();
    const length = document.getElementById('length').value;
    return generateRandomPassword(chars, length);
  }

  function getCharacterSet() {
    let chars = '';
    if (document.getElementById('uppercase').checked) chars += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    if (document.getElementById('lowercase').checked) chars += 'abcdefghijklmnopqrstuvwxyz';
    if (document.getElementById('numbers').checked) chars += '0123456789';
    if (document.getElementById('symbols').checked) chars += '!@#$%^&*()_+-=[]{}|;:,.<>?';
    return chars;
  }

  function generateRandomPassword(chars, length) {
    if (!chars) {
      alert('Please select at least one character set');
      return '';
    }
    let password = '';
    for (let i = 0; i < length; i++) {
      password += chars[Math.floor(Math.random() * chars.length)];
    }
    return password;
  }

  function generatePasswords() {
    const chars = getCharacterSet();
    if (!chars) return;

    if (currentMode === 'single') {
      document.getElementById('generatedPassword').value = generateSinglePassword();
    } else {
      const count = document.getElementById('batchCount').value;
      const length = document.getElementById('length').value;
      const passwords = [];
      for (let i = 0; i < count; i++) {
        passwords.push(generateRandomPassword(chars, length));
      }
      document.getElementById('batchPasswords').value = passwords.join('\n');
    }
  }

  function copyPassword() {
    const field = document.getElementById('generatedPassword');
    field.select();
    document.execCommand('copy');
    showCopyFeedback(field.nextElementSibling);
  }

  function copyBatchPasswords() {
    const field = document.getElementById('batchPasswords');
    field.select();
    document.execCommand('copy');
    showCopyFeedback(field.nextElementSibling);
  }

  function showCopyFeedback(button) {
    const originalText = button.textContent;
    button.textContent = 'Copied!';
    setTimeout(() => {
      button.textContent = originalText;
    }, 1000);
  }

  // Generate initial password
  generatePasswords();
</script>
